import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import urllib.parse
import re
from dataclasses import dataclass
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = ""

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dataclass
class Product:
    marketplace: str
    name: str
    price: int
    rating: float
    feedbacks: int
    image_url: str
    product_url: str
    product_id: str = ""

class WildberriesScraper:
    def __init__(self):
        self.driver = None
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        self.driver = webdriver.Chrome(options=chrome_options)
    
    def search_products(self, query: str, limit: int = 5) -> List[Product]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Wildberries"""
        try:
            if not self.driver:
                self.setup_driver()
                
            encoded_query = urllib.parse.quote(query)
            url = f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}"
            
            logger.info(f"Wildberries: Opening URL: {url}")
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.CLASS_NAME, "product-card"))
            )
            
            time.sleep(3)
            return self.parse_search_results(limit)
            
        except Exception as e:
            logger.error(f"Wildberries search error: {e}")
            return []
    
    def parse_search_results(self, limit):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ Wildberries"""
        products = []
        
        try:
            product_cards = self.driver.find_elements(By.CLASS_NAME, "product-card")[:limit]
            
            for card in product_cards:
                try:
                    product = self.parse_product_card(card)
                    if product:
                        products.append(product)
                except Exception as e:
                    logger.error(f"Error parsing Wildberries product card: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"Wildberries parse results error: {e}")
        
        return products
    
    def parse_product_card(self, card):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ Wildberries"""
        try:
            product_id = card.get_attribute("data-nm-id")
            if not product_id:
                return None
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_element = card.find_element(By.CLASS_NAME, "product-card__name")
            name = name_element.text.strip() if name_element else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ë—Ä–µ–Ω–¥
            brand_element = card.find_element(By.CLASS_NAME, "product-card__brand")
            brand = brand_element.text.strip() if brand_element else "–ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"
            
            # –¶–µ–Ω–∞
            price = 0
            try:
                price_element = card.find_element(By.CLASS_NAME, "price__lower-price")
                price_text = price_element.text.strip() if price_element else "0"
                price = int(re.sub(r'[^\d]', '', price_text))
            except:
                pass
            
            # –†–µ–π—Ç–∏–Ω–≥
            rating = 0
            try:
                rating_element = card.find_element(By.CLASS_NAME, "product-card__rating")
                rating_text = rating_element.get_attribute("textContent").strip()
                rating = float(rating_text) if rating_text else 0
            except:
                pass
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            feedbacks = 0
            try:
                feedbacks_element = card.find_element(By.CLASS_NAME, "product-card__count")
                feedbacks_text = feedbacks_element.text.strip().replace("(", "").replace(")", "")
                feedbacks = int(feedbacks_text) if feedbacks_text.isdigit() else 0
            except:
                pass
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
            product_url = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = self.get_product_image(product_id)
            
            return Product(
                marketplace="Wildberries",
                name=f"{brand} - {name}",
                price=price,
                rating=rating,
                feedbacks=feedbacks,
                image_url=image_url,
                product_url=product_url,
                product_id=product_id
            )
            
        except Exception as e:
            logger.error(f"Wildberries parse card error: {e}")
            return None
    
    def get_product_image(self, product_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ Wildberries"""
        if not product_id:
            return "https://via.placeholder.com/400x300/7100FF/FFFFFF?text=No+Image"
        
        try:
            vol = int(product_id) // 100000
            part = int(product_id) // 1000
            return f"https://basket-{vol:02d}.wbbasket.ru/vol{vol}/part{part}/{product_id}/images/c516x688/1.jpg"
        except:
            return "https://via.placeholder.com/400x300/7100FF/FFFFFF?text=No+Image"
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫—Ä–µ–π–ø–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Wildberries
wb_scraper = WildberriesScraper()

def create_search_keyboards(query: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö"""
    encoded_query = urllib.parse.quote(query)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É
    search_keyboard = InlineKeyboardBuilder()
    search_keyboard.add(
        InlineKeyboardButton(
            text="üîç –ò—Å–∫–∞—Ç—å –≤ OZON",
            url=f"https://www.ozon.ru/search/?text={encoded_query}"
        ),
        InlineKeyboardButton(
            text="üîç –ò—Å–∫–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ", 
            url=f"https://market.yandex.ru/search?text={encoded_query}"
        )
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
    compare_keyboard = InlineKeyboardBuilder()
    compare_keyboard.add(
        InlineKeyboardButton(
            text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö",
            url=f"https://www.ozon.ru/search/?text={encoded_query}"
        )
    )
    
    return search_keyboard.as_markup(), compare_keyboard.as_markup()

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º!\n\n"
        "üîç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ \"–∫–µ–¥—ã\"\n"
        "‚Ä¢ \"–∫—Ä–æ—Å—Å–æ–≤–∫–∏ nike\"\n"
        "‚Ä¢ \"—Ç–µ–ª–µ—Ñ–æ–Ω\"\n\n"
        "–Ø –ø–æ–∫–∞–∂—É —Ç–æ–≤–∞—Ä—ã –∏–∑ Wildberries –∏ –ø–æ–º–æ–≥—É —Å—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö!"
    )

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "2. –Ø –Ω–∞–π–¥—É —Ç–æ–≤–∞—Ä—ã –≤ Wildberries\n"
        "3. –ü–æ–∫–∞–∂—É —Ü–µ–Ω—ã, —Ñ–æ—Ç–æ –∏ —Å—Å—ã–ª–∫–∏\n"
        "4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
        "‚Ä¢ <code>–∫–µ–¥—ã</code>\n"
        "‚Ä¢ <code>–∫—É—Ä—Ç–∫–∞ –∑–∏–º–Ω—è—è</code>\n"
        "‚Ä¢ <code>redmi 15c</code>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã!"
    )
    await message.answer(help_text, parse_mode="HTML")

@dp.message(F.text)
async def search_handler(message: types.Message):
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_keyboard, compare_keyboard = create_search_keyboards(query)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    search_message = await message.answer("üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ Wildberries...")
    
    try:
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ Wildberries
        products = wb_scraper.search_products(query, limit=5)
        
        if not products:
            await search_message.edit_text(
                f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Wildberries.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å"
            )
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
            await message.answer(
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö:",
                reply_markup=search_keyboard
            )
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        await search_message.edit_text(
            f"‚úÖ –ù–∞—à—ë–ª {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –≤ Wildberries:",
            reply_markup=compare_keyboard
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, product in enumerate(products, 1):
            caption = (
                f"üè∑Ô∏è <b>{product.name}</b>\n\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price:,} ‚ÇΩ\n"
                f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {product.rating}\n"
                f"üí¨ <b>–û—Ç–∑—ã–≤—ã:</b> {product.feedbacks}\n"
                f"üÜî <b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product.product_id}"
            )
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É",
                url=product.product_url
            ))
            
            try:
                await message.answer_photo(
                    photo=product.image_url,
                    caption=caption,
                    reply_markup=keyboard.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Error sending photo: {e}")
                await message.answer(
                    f"{caption}\n\nüîó –°—Å—ã–ª–∫–∞: {product.product_url}",
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è Wildberries)
        await send_price_comparison(message, products, query)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
        await message.answer(
            "üí° <b>–•–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö?</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞:",
            parse_mode="HTML",
            reply_markup=search_keyboard
        )
                
    except Exception as e:
        logger.error(f"Search handler error: {e}")
        await search_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
        await message.answer(
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö:",
            reply_markup=search_keyboard
        )

async def send_price_comparison(message: types.Message, products: List[Product], query: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω"""
    if not products:
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ
    sorted_products = sorted(products, key=lambda x: x.price)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    comparison_text = f"üèÜ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –≤ Wildberries –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"</b>\n\n"
    
    for i, product in enumerate(sorted_products[:5], 1):
        comparison_text += (
            f"{i}. üè∑Ô∏è <b>{product.name[:60]}...</b>\n"
            f"   üí∞ <b>{product.price:,} ‚ÇΩ</b>\n"
            f"   ‚≠ê {product.rating} | üí¨ {product.feedbacks}\n\n"
        )
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ–≤–∞—Ä
    cheapest = sorted_products[0]
    comparison_text += f"üí° <b>–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n"
    comparison_text += f"üí∞ {cheapest.price:,} ‚ÇΩ\n"
    comparison_text += f"üîó {cheapest.product_url}"
    
    await message.answer(comparison_text, parse_mode="HTML")

@dp.message(Command("search_ozon"))
async def search_ozon_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ Ozon"""
    await message.answer(
        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –≤ Ozon –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, "
        "–∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞!"
    )

@dp.message(Command("search_yandex"))
async def search_yandex_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ"""
    await message.answer(
        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, "
        "–∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞!"
    )

@dp.shutdown()
async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    wb_scraper.close()

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())